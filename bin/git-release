#!/bin/bash -e
set -e

############################################################
#####                  Git-Release                     #####
### Pure bash script for handling git release versioning ###
############################################################


############################################################
#####                   DEFAULTS                       #####
############################################################

RELEASE_PREFIX='releases/v'
CHANGELOG_FILE='CHANGELOG'
VERSION_FILE='VERSION'
CHANGELOG_SCOPE=':all_commits'
CHANGELOG_STRATEGY=':overwrite'
CHANGELOG_DISPLAY_URLS=':no_urls'

START_POINT=''
END_POINT=''

#Supporting functions
. "${BASH_SOURCE[0]%/*}/../support/support-functions.sh"

USAGE_OUTPUT="
usage : $(basename "$0") $(arg_for $ARG_VERSION '<version>') [$(arg_for $ARG_RELEASE_PREFIX '<prefix>')] [$(arg_for $ARG_START '<start>')] [$(arg_for $ARG_FINISH '<finish>')]
                         [$(arg_for $ARG_FORCE)] [$(arg_for $ARG_VERSION_FILE '<version_file>')]
                         [$(arg_for $ARG_APPEND)] [$(arg_for $ARG_PULL_REQUESTS)] [$(arg_for $ARG_CHANGELOG '<changelog_file>')]
                         [$(arg_for $ARG_DISPLAY_URLS)]
                         [$(arg_for $ARG_HELP_TEXT)]
                         --- create git release tag with changelog

options:
  required:
    $(arg_for $ARG_VERSION '<version>')  set the software versioning type (major or minor or patch)
  optional:
    [$(arg_for $ARG_RELEASE_PREFIX '<prefix>')] set the release prefix (default: '${RELEASE_PREFIX}')
    [$(arg_for $ARG_FORCE)]             force push of new tags (default: commit changes but do not push)
  changelog:
    [$(arg_for $ARG_START '<start>')]   set the start point (default: the last tag name that matches the prefix)
    [$(arg_for $ARG_FINISH '<finish>')] set the end/finish point (default: HEAD)
    [$(arg_for $ARG_APPEND)]            append to changelog (default: ${CHANGELOG_STRATEGY})
    [$(arg_for $ARG_PULL_REQUESTS)]                 set to only pull requests (default: ${CHANGELOG_SCOPE})
    [$(arg_for $ARG_DISPLAY_URLS)]                  set to display each commit/pull url in changelog (default: ${CHANGELOG_DISPLAY_URLS})
    [$(arg_for $ARG_CHANGELOG '<changelog_file>')]  set the changelog filename (default: ${CHANGELOG_FILE})
    [$(arg_for $ARG_VERSION_FILE '<version_file>')] set the version file name (default: ${VERSION_FILE})
  general:
    $(arg_for $ARG_HELP_TEXT)  show this help text


usage examples:

  1) Basic usage with defaults
    Given the last release was at 1.0.4, with a tag of 'our-releases/REL1.0.4' :

    $(basename "$0") $(arg_for $ARG_VERSION 'minor') $(arg_for $ARG_RELEASE_PREFIX 'our-releases/REL-')

    Tag generated           : our-releases/REL1.1.4
    Version file contains   : 1.1.4
    CHANGELOG file contains : commit information for all commits between last release and HEAD

  2) Pull requests only with their urls (changelog generated only with body of pull request titles)

    $(basename "$0") $(arg_for $ARG_VERSION 'minor') $(arg_for $ARG_PULL_REQUESTS) $(arg_for $ARG_DISPLAY_URLS)

  3) Generate custom changelog and version file

    $(basename "$0") $(arg_for $ARG_VERSION 'minor') $(arg_for $ARG_CHANGELOG 'MYCHANGELOGFILE') $(arg_for $ARG_VERSION_FILE 'MYVERSIONFILE')

"

############################################################
#####                  INPUT CAPTURE                   #####
############################################################

while getopts "$ARG_FORCE""$ARG_HELP_TEXT""$ARG_APPEND""$ARG_PULL_REQUESTS""$ARG_DISPLAY_URLS""$ARG_VERSION":"$ARG_START":"$ARG_FINISH":"$ARG_RELEASE_PREFIX":"$ARG_CHANGELOG":"$ARG_VERSION_FILE": option
do
  case "${option}"
  in
    $ARG_HELP_TEXT)
      echo "$USAGE_OUTPUT" >&2
      exit 0
      ;;
    $ARG_PULL_REQUESTS) CHANGELOG_SCOPE=":pulls_only";;
    $ARG_APPEND) CHANGELOG_STRATEGY=":append";;
    $ARG_FORCE) FORCE_PUSH='true';;
    $ARG_VERSION) VERSION_TYPE="$OPTARG";;
    $ARG_RELEASE_PREFIX) RELEASE_PREFIX="$OPTARG";;
    $ARG_START) START_POINT="$OPTARG";;
    $ARG_FINISH) END_POINT="$OPTARG";;
    $ARG_CHANGELOG) CHANGELOG_FILE="$OPTARG";;
    $ARG_VERSION_FILE) VERSION_FILE="$OPTARG";;
    $ARG_DISPLAY_URLS) CHANGELOG_DISPLAY_URLS=':with_urls';;

    ?)
      printf "illegal option: '%s'\n" "$OPTARG" >&2
      echo "$USAGE_OUTPUT" >&2
      exit 1
      ;;
  esac
done
shift $((OPTIND - 1))

############################################################
#####                  VALIDATION                      #####
############################################################

validate_version_type "$VERSION_TYPE" "$USAGE_OUTPUT"
ensure_git_directory
ensure_git_is_clean

############################################################
#####                   RELEASE                        #####
############################################################
last_tag_name=$(get_last_tag_name "$RELEASE_PREFIX");

if [[ "$START_POINT" = "" ]]; then
  START_POINT=$last_tag_name
fi;

next_version_number=$(get_next_version_number_from_tag $VERSION_TYPE $last_tag_name)
next_tag_name="${RELEASE_PREFIX}${next_version_number}"
generate_version_file "$next_version_number" "$VERSION_FILE"

echo "VERSION_TYPE: $VERSION_TYPE"
echo "last_tag_name: $last_tag_name"
echo "next_version_number: $next_version_number"
echo "next_tag_name: $next_tag_name"
echo "START_POINT: $START_POINT"
echo "END_POINT: $END_POINT"

changelog_content=$(generate_changelog_content "$next_version_number" "$CHANGELOG_SCOPE" "$CHANGELOG_DISPLAY_URLS" "$START_POINT" "$END_POINT")

generate_changelog_file "$changelog_content" "$CHANGELOG_STRATEGY" "$CHANGELOG_FILE"

if [[ "$FORCE_PUSH" != 'true' ]]; then
  open_changelog_for_edit "$CHANGELOG_FILE"
fi;

set +e #Allow commit to fail if no files have changed
git add -A
git commit -m "Release : ${next_tag_name}"
set -e

git tag $next_tag_name

if [[ "$FORCE_PUSH" = 'true' ]]; then
  git push $next_tag_name
fi;

echo
echo ">> Tag '$next_tag_name' generated with '$CHANGELOG_FILE' and '$VERSION_FILE' ($next_version_number)."
